"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file

License
"""

import briar.briar_grpc.briar_error_pb2
import briar.briar_grpc.briar_pb2
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class Empty(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___Empty = Empty

@typing.final
class DatabaseListRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    REGEX_FIELD_NUMBER: builtins.int
    regex: builtins.str
    def __init__(
        self,
        *,
        regex: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["regex", b"regex"]) -> None: ...

global___DatabaseListRequest = DatabaseListRequest

@typing.final
class DatabaseListReply(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATABASE_NAMES_FIELD_NUMBER: builtins.int
    @property
    def database_names(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    def __init__(
        self,
        *,
        database_names: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["database_names", b"database_names"]) -> None: ...

global___DatabaseListReply = DatabaseListReply

@typing.final
class DatabaseInfoRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATABASE_NAME_FIELD_NUMBER: builtins.int
    DURATIONS_FIELD_NUMBER: builtins.int
    database_name: builtins.str
    """REQUIRED Name of the database to retrieve info for"""
    @property
    def durations(self) -> briar.briar_grpc.briar_pb2.BriarDurations:
        """Log the time needed to complete the request on the server"""

    def __init__(
        self,
        *,
        database_name: builtins.str = ...,
        durations: briar.briar_grpc.briar_pb2.BriarDurations | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["durations", b"durations"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["database_name", b"database_name", "durations", b"durations"]) -> None: ...

global___DatabaseInfoRequest = DatabaseInfoRequest

@typing.final
class DatabaseInfoReply(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    INFO_FIELD_NUMBER: builtins.int
    DURATION_FIELD_NUMBER: builtins.int
    EXISTS_FIELD_NUMBER: builtins.int
    exists: builtins.bool
    """REQUIRED: set to true if the requested database exists and the reply is populated correctly"""
    @property
    def info(self) -> briar.briar_grpc.briar_pb2.BriarDatabaseInfo:
        """REQUIRED Contains the information about the database"""

    @property
    def duration(self) -> briar.briar_grpc.briar_pb2.BriarDurations:
        """Log the time needed to complete the request on the server"""

    def __init__(
        self,
        *,
        info: briar.briar_grpc.briar_pb2.BriarDatabaseInfo | None = ...,
        duration: briar.briar_grpc.briar_pb2.BriarDurations | None = ...,
        exists: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["duration", b"duration", "info", b"info"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["duration", b"duration", "exists", b"exists", "info", b"info"]) -> None: ...

global___DatabaseInfoReply = DatabaseInfoReply

@typing.final
class DatabaseListEntriesRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATABASE_NAME_FIELD_NUMBER: builtins.int
    DURATIONS_FIELD_NUMBER: builtins.int
    database_name: builtins.str
    """REQUIRED database name"""
    @property
    def durations(self) -> briar.briar_grpc.briar_pb2.BriarDurations:
        """Log the time needed to complete the request on the server"""

    def __init__(
        self,
        *,
        database_name: builtins.str = ...,
        durations: briar.briar_grpc.briar_pb2.BriarDurations | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["durations", b"durations"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["database_name", b"database_name", "durations", b"durations"]) -> None: ...

global___DatabaseListEntriesRequest = DatabaseListEntriesRequest

@typing.final
class DatabaseListentriesReply(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ENTRY_IDS_FIELD_NUMBER: builtins.int
    ENTRY_ATTRIBUTES_FIELD_NUMBER: builtins.int
    DURATIONS_FIELD_NUMBER: builtins.int
    EXISTS_FIELD_NUMBER: builtins.int
    exists: builtins.bool
    """Flag defining if the requested database exists"""
    @property
    def entry_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """REQUIRED List of entry IDs for the given database"""

    @property
    def entry_attributes(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[briar.briar_grpc.briar_pb2.FrameMetadata]:
        """List of attributes for each entry"""

    @property
    def durations(self) -> briar.briar_grpc.briar_pb2.BriarDurations:
        """Duration of retrieving entries"""

    def __init__(
        self,
        *,
        entry_ids: collections.abc.Iterable[builtins.str] | None = ...,
        entry_attributes: collections.abc.Iterable[briar.briar_grpc.briar_pb2.FrameMetadata] | None = ...,
        durations: briar.briar_grpc.briar_pb2.BriarDurations | None = ...,
        exists: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["durations", b"durations"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["durations", b"durations", "entry_attributes", b"entry_attributes", "entry_ids", b"entry_ids", "exists", b"exists"]) -> None: ...

global___DatabaseListentriesReply = DatabaseListentriesReply

@typing.final
class StatusRequest(google.protobuf.message.Message):
    """Request status on the service.  This is currently an empty message."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___StatusRequest = StatusRequest

@typing.final
class StatusReply(google.protobuf.message.Message):
    """Returns basic status and information on the service and its version 
    as well as additional options and features supported.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DEVELOPER_NAME_FIELD_NUMBER: builtins.int
    DEV_SHORT_FIELD_NUMBER: builtins.int
    SERVICE_NAME_FIELD_NUMBER: builtins.int
    VERSION_FIELD_NUMBER: builtins.int
    API_VERSION_FIELD_NUMBER: builtins.int
    STATUS_FIELD_NUMBER: builtins.int
    CONFIGURATION_FIELD_NUMBER: builtins.int
    developer_name: builtins.str
    """REQUIRED: The name of the developer of the service."""
    dev_short: builtins.str
    """OPTIONAL: The shortened or abreviated name of name of the developer of the service."""
    service_name: builtins.str
    """REQUIRED: The name of the service software."""
    status: briar.briar_grpc.briar_pb2.BriarServiceStatus.ValueType
    """REQUIRED: Used to communicate the status of the service.  This should typically return READY."""
    @property
    def version(self) -> briar.briar_grpc.briar_pb2.APIVersion:
        """REQUIRED: The specific version for this service."""

    @property
    def api_version(self) -> briar.briar_grpc.briar_pb2.APIVersion:
        """REQUIRED: The specific version for this service."""

    @property
    def configuration(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[briar.briar_grpc.briar_pb2.Attribute]:
        """Optional features or options that can be communicated to clients.
        This could communicate prefereces or settings for the service and
        additional metadata.
        """

    def __init__(
        self,
        *,
        developer_name: builtins.str = ...,
        dev_short: builtins.str = ...,
        service_name: builtins.str = ...,
        version: briar.briar_grpc.briar_pb2.APIVersion | None = ...,
        api_version: briar.briar_grpc.briar_pb2.APIVersion | None = ...,
        status: briar.briar_grpc.briar_pb2.BriarServiceStatus.ValueType = ...,
        configuration: collections.abc.Iterable[briar.briar_grpc.briar_pb2.Attribute] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["api_version", b"api_version", "version", b"version"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["api_version", b"api_version", "configuration", b"configuration", "dev_short", b"dev_short", "developer_name", b"developer_name", "service_name", b"service_name", "status", b"status", "version", b"version"]) -> None: ...

global___StatusReply = StatusReply

@typing.final
class DatabaseCreateRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATABASE_FIELD_NUMBER: builtins.int
    TMPLS_FIELD_NUMBER: builtins.int
    DURATIONS_FIELD_NUMBER: builtins.int
    @property
    def database(self) -> briar.briar_grpc.briar_pb2.BriarDatabase:
        """REQUIRED: Name of database to create"""

    @property
    def tmpls(self) -> briar.briar_grpc.briar_pb2.TemplateList:
        """OPTIONAL: Templates to create database from"""

    @property
    def durations(self) -> briar.briar_grpc.briar_pb2.BriarDurations:
        """Log the time needed to complete the request on the server"""

    def __init__(
        self,
        *,
        database: briar.briar_grpc.briar_pb2.BriarDatabase | None = ...,
        tmpls: briar.briar_grpc.briar_pb2.TemplateList | None = ...,
        durations: briar.briar_grpc.briar_pb2.BriarDurations | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["database", b"database", "durations", b"durations", "tmpls", b"tmpls"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["database", b"database", "durations", b"durations", "tmpls", b"tmpls"]) -> None: ...

global___DatabaseCreateRequest = DatabaseCreateRequest

@typing.final
class DatabaseCreateReply(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    IDS_FIELD_NUMBER: builtins.int
    DURATIONS_FIELD_NUMBER: builtins.int
    ERRORS_FIELD_NUMBER: builtins.int
    @property
    def ids(self) -> briar.briar_grpc.briar_pb2.TemplateIds:
        """OPTIONAL: template IDs that new database has been created with"""

    @property
    def durations(self) -> briar.briar_grpc.briar_pb2.BriarDurations:
        """Log the time needed to complete the request on the server"""

    @property
    def errors(self) -> briar.briar_grpc.briar_error_pb2.BriarErrors: ...
    def __init__(
        self,
        *,
        ids: briar.briar_grpc.briar_pb2.TemplateIds | None = ...,
        durations: briar.briar_grpc.briar_pb2.BriarDurations | None = ...,
        errors: briar.briar_grpc.briar_error_pb2.BriarErrors | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["durations", b"durations", "errors", b"errors", "ids", b"ids"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["durations", b"durations", "errors", b"errors", "ids", b"ids"]) -> None: ...

global___DatabaseCreateReply = DatabaseCreateReply

@typing.final
class DatabaseCheckpointRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATABASE_FIELD_NUMBER: builtins.int
    DURATIONS_FIELD_NUMBER: builtins.int
    ERRORS_FIELD_NUMBER: builtins.int
    @property
    def database(self) -> briar.briar_grpc.briar_pb2.BriarDatabase:
        """REQUIRED: Name of database to create"""

    @property
    def durations(self) -> briar.briar_grpc.briar_pb2.BriarDurations:
        """Log the time needed to complete the request on the server"""

    @property
    def errors(self) -> briar.briar_grpc.briar_error_pb2.BriarErrors: ...
    def __init__(
        self,
        *,
        database: briar.briar_grpc.briar_pb2.BriarDatabase | None = ...,
        durations: briar.briar_grpc.briar_pb2.BriarDurations | None = ...,
        errors: briar.briar_grpc.briar_error_pb2.BriarErrors | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["database", b"database", "durations", b"durations", "errors", b"errors"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["database", b"database", "durations", b"durations", "errors", b"errors"]) -> None: ...

global___DatabaseCheckpointRequest = DatabaseCheckpointRequest

@typing.final
class DatabaseCheckpointSubjectRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATABASE_FIELD_NUMBER: builtins.int
    SUBJECT_ID_FIELD_NUMBER: builtins.int
    DURATIONS_FIELD_NUMBER: builtins.int
    ERRORS_FIELD_NUMBER: builtins.int
    subject_id: builtins.str
    """REQUIRED: Name of subject to finalize within database"""
    @property
    def database(self) -> briar.briar_grpc.briar_pb2.BriarDatabase:
        """REQUIRED: Name of database to create"""

    @property
    def durations(self) -> briar.briar_grpc.briar_pb2.BriarDurations:
        """Log the time needed to complete the request on the server"""

    @property
    def errors(self) -> briar.briar_grpc.briar_error_pb2.BriarErrors: ...
    def __init__(
        self,
        *,
        database: briar.briar_grpc.briar_pb2.BriarDatabase | None = ...,
        subject_id: builtins.str = ...,
        durations: briar.briar_grpc.briar_pb2.BriarDurations | None = ...,
        errors: briar.briar_grpc.briar_error_pb2.BriarErrors | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["database", b"database", "durations", b"durations", "errors", b"errors"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["database", b"database", "durations", b"durations", "errors", b"errors", "subject_id", b"subject_id"]) -> None: ...

global___DatabaseCheckpointSubjectRequest = DatabaseCheckpointSubjectRequest

@typing.final
class DatabaseCheckpointReply(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DURATIONS_FIELD_NUMBER: builtins.int
    ERRORS_FIELD_NUMBER: builtins.int
    EXISTS_FIELD_NUMBER: builtins.int
    exists: builtins.bool
    """REQUIRED: set to true if the requested database exists and the reply is populated correctly"""
    @property
    def durations(self) -> briar.briar_grpc.briar_pb2.BriarDurations:
        """Log the time needed to complete the request on the server"""

    @property
    def errors(self) -> briar.briar_grpc.briar_error_pb2.BriarErrors: ...
    def __init__(
        self,
        *,
        durations: briar.briar_grpc.briar_pb2.BriarDurations | None = ...,
        errors: briar.briar_grpc.briar_error_pb2.BriarErrors | None = ...,
        exists: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["durations", b"durations", "errors", b"errors"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["durations", b"durations", "errors", b"errors", "exists", b"exists"]) -> None: ...

global___DatabaseCheckpointReply = DatabaseCheckpointReply

@typing.final
class DatabaseLoadRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATABASE_FIELD_NUMBER: builtins.int
    DURATIONS_FIELD_NUMBER: builtins.int
    @property
    def database(self) -> briar.briar_grpc.briar_pb2.BriarDatabase:
        """Name of database to load"""

    @property
    def durations(self) -> briar.briar_grpc.briar_pb2.BriarDurations:
        """Log the time needed to complete the request on the server"""

    def __init__(
        self,
        *,
        database: briar.briar_grpc.briar_pb2.BriarDatabase | None = ...,
        durations: briar.briar_grpc.briar_pb2.BriarDurations | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["database", b"database", "durations", b"durations"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["database", b"database", "durations", b"durations"]) -> None: ...

global___DatabaseLoadRequest = DatabaseLoadRequest

@typing.final
class DatabaseLoadReply(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    IDS_FIELD_NUMBER: builtins.int
    RECORDS_FIELD_NUMBER: builtins.int
    DURATIONS_FIELD_NUMBER: builtins.int
    ERRORS_FIELD_NUMBER: builtins.int
    EXISTS_FIELD_NUMBER: builtins.int
    exists: builtins.bool
    """REQUIRED: Set to false if the requested database did not exist"""
    @property
    def ids(self) -> briar.briar_grpc.briar_pb2.TemplateIds:
        """OPTIONAL: template IDs included in the loaded database"""

    @property
    def records(self) -> briar.briar_grpc.briar_pb2.RecordList:
        """DEPRICATED: records are not used at this time."""

    @property
    def durations(self) -> briar.briar_grpc.briar_pb2.BriarDurations:
        """Log the time needed to complete the request on the server"""

    @property
    def errors(self) -> briar.briar_grpc.briar_error_pb2.BriarErrors: ...
    def __init__(
        self,
        *,
        ids: briar.briar_grpc.briar_pb2.TemplateIds | None = ...,
        records: briar.briar_grpc.briar_pb2.RecordList | None = ...,
        durations: briar.briar_grpc.briar_pb2.BriarDurations | None = ...,
        errors: briar.briar_grpc.briar_error_pb2.BriarErrors | None = ...,
        exists: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["durations", b"durations", "errors", b"errors", "ids", b"ids", "records", b"records"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["durations", b"durations", "errors", b"errors", "exists", b"exists", "ids", b"ids", "records", b"records"]) -> None: ...

global___DatabaseLoadReply = DatabaseLoadReply

@typing.final
class DatabaseInsertRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATABASE_FIELD_NUMBER: builtins.int
    TMPLS_FIELD_NUMBER: builtins.int
    IDS_FIELD_NUMBER: builtins.int
    DURATIONS_FIELD_NUMBER: builtins.int
    @property
    def database(self) -> briar.briar_grpc.briar_pb2.BriarDatabase:
        """OPTIONAL: Database to batch insert into"""

    @property
    def tmpls(self) -> briar.briar_grpc.briar_pb2.TemplateList:
        """OPTIONAL: Templates to insert"""

    @property
    def ids(self) -> briar.briar_grpc.briar_pb2.TemplateIds:
        """OPTIONAL: IDs of templates to insert"""

    @property
    def durations(self) -> briar.briar_grpc.briar_pb2.BriarDurations:
        """OPTIONAL: Log the time needed to complete the request on the server"""

    def __init__(
        self,
        *,
        database: briar.briar_grpc.briar_pb2.BriarDatabase | None = ...,
        tmpls: briar.briar_grpc.briar_pb2.TemplateList | None = ...,
        ids: briar.briar_grpc.briar_pb2.TemplateIds | None = ...,
        durations: briar.briar_grpc.briar_pb2.BriarDurations | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["database", b"database", "durations", b"durations", "ids", b"ids", "tmpls", b"tmpls"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["database", b"database", "durations", b"durations", "ids", b"ids", "tmpls", b"tmpls"]) -> None: ...

global___DatabaseInsertRequest = DatabaseInsertRequest

@typing.final
class DatabaseInsertReply(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    IDS_FIELD_NUMBER: builtins.int
    DURATIONS_FIELD_NUMBER: builtins.int
    ERRORS_FIELD_NUMBER: builtins.int
    EXISTS_FIELD_NUMBER: builtins.int
    exists: builtins.bool
    """OPTIONAL: REQUIRED: Set to false if the requested database did not exist"""
    @property
    def ids(self) -> briar.briar_grpc.briar_pb2.TemplateIds:
        """OPTIONAL: Database ids of the templates"""

    @property
    def durations(self) -> briar.briar_grpc.briar_pb2.BriarDurations:
        """OPTIONAL: Log the time needed to complete the request on the server"""

    @property
    def errors(self) -> briar.briar_grpc.briar_error_pb2.BriarErrors: ...
    def __init__(
        self,
        *,
        ids: briar.briar_grpc.briar_pb2.TemplateIds | None = ...,
        durations: briar.briar_grpc.briar_pb2.BriarDurations | None = ...,
        errors: briar.briar_grpc.briar_error_pb2.BriarErrors | None = ...,
        exists: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["durations", b"durations", "errors", b"errors", "ids", b"ids"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["durations", b"durations", "errors", b"errors", "exists", b"exists", "ids", b"ids"]) -> None: ...

global___DatabaseInsertReply = DatabaseInsertReply

@typing.final
class DatabaseRemoveTmplsRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATABASE_FIELD_NUMBER: builtins.int
    IDS_FIELD_NUMBER: builtins.int
    DURATIONS_FIELD_NUMBER: builtins.int
    @property
    def database(self) -> briar.briar_grpc.briar_pb2.BriarDatabase:
        """UNIMPLEMENTED: Database to remove from"""

    @property
    def ids(self) -> briar.briar_grpc.briar_pb2.TemplateIds:
        """UNIMPLEMENTED:"""

    @property
    def durations(self) -> briar.briar_grpc.briar_pb2.BriarDurations:
        """UNIMPLEMENTED: Log the time needed to complete the request on the server"""

    def __init__(
        self,
        *,
        database: briar.briar_grpc.briar_pb2.BriarDatabase | None = ...,
        ids: briar.briar_grpc.briar_pb2.TemplateIds | None = ...,
        durations: briar.briar_grpc.briar_pb2.BriarDurations | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["database", b"database", "durations", b"durations", "ids", b"ids"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["database", b"database", "durations", b"durations", "ids", b"ids"]) -> None: ...

global___DatabaseRemoveTmplsRequest = DatabaseRemoveTmplsRequest

@typing.final
class DatabaseRemoveTmplsReply(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DURATIONS_FIELD_NUMBER: builtins.int
    ERRORS_FIELD_NUMBER: builtins.int
    @property
    def durations(self) -> briar.briar_grpc.briar_pb2.BriarDurations:
        """UNIMPLEMENTED:"""

    @property
    def errors(self) -> briar.briar_grpc.briar_error_pb2.BriarErrors:
        """UNIMPLEMENTED: Aggregate errors which happened mid-batch"""

    def __init__(
        self,
        *,
        durations: briar.briar_grpc.briar_pb2.BriarDurations | None = ...,
        errors: briar.briar_grpc.briar_error_pb2.BriarErrors | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["durations", b"durations", "errors", b"errors"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["durations", b"durations", "errors", b"errors"]) -> None: ...

global___DatabaseRemoveTmplsReply = DatabaseRemoveTmplsReply

@typing.final
class DatabaseMergeRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATABASE_LIST_FIELD_NUMBER: builtins.int
    OUTPUT_DATABASE_FIELD_NUMBER: builtins.int
    DURATIONS_FIELD_NUMBER: builtins.int
    @property
    def database_list(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[briar.briar_grpc.briar_pb2.BriarDatabase]:
        """REQUIRED: Databases to merge"""

    @property
    def output_database(self) -> briar.briar_grpc.briar_pb2.BriarDatabase:
        """REQUIRED: Database to output"""

    @property
    def durations(self) -> briar.briar_grpc.briar_pb2.BriarDurations:
        """Log the time needed to complete the request on the server"""

    def __init__(
        self,
        *,
        database_list: collections.abc.Iterable[briar.briar_grpc.briar_pb2.BriarDatabase] | None = ...,
        output_database: briar.briar_grpc.briar_pb2.BriarDatabase | None = ...,
        durations: briar.briar_grpc.briar_pb2.BriarDurations | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["durations", b"durations", "output_database", b"output_database"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["database_list", b"database_list", "durations", b"durations", "output_database", b"output_database"]) -> None: ...

global___DatabaseMergeRequest = DatabaseMergeRequest

@typing.final
class DatabaseMergeReply(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DURATIONS_FIELD_NUMBER: builtins.int
    ENTRY_COUNT_FIELD_NUMBER: builtins.int
    EXISTS_FIELD_NUMBER: builtins.int
    entry_count: builtins.int
    """REQUIRED: number of entries in the newly merged database"""
    @property
    def durations(self) -> briar.briar_grpc.briar_pb2.BriarDurations: ...
    @property
    def exists(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.bool]:
        """REQUIRED: Set to false if the requested database did not exist"""

    def __init__(
        self,
        *,
        durations: briar.briar_grpc.briar_pb2.BriarDurations | None = ...,
        entry_count: builtins.int = ...,
        exists: collections.abc.Iterable[builtins.bool] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["durations", b"durations"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["durations", b"durations", "entry_count", b"entry_count", "exists", b"exists"]) -> None: ...

global___DatabaseMergeReply = DatabaseMergeReply

@typing.final
class DatabaseDeleteRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATABASE_FIELD_NUMBER: builtins.int
    DURATIONS_FIELD_NUMBER: builtins.int
    @property
    def database(self) -> briar.briar_grpc.briar_pb2.BriarDatabase:
        """REQUIRED: Database to remove from"""

    @property
    def durations(self) -> briar.briar_grpc.briar_pb2.BriarDurations:
        """Log the time needed to complete the request on the server"""

    def __init__(
        self,
        *,
        database: briar.briar_grpc.briar_pb2.BriarDatabase | None = ...,
        durations: briar.briar_grpc.briar_pb2.BriarDurations | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["database", b"database", "durations", b"durations"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["database", b"database", "durations", b"durations"]) -> None: ...

global___DatabaseDeleteRequest = DatabaseDeleteRequest

@typing.final
class DatabaseDeleteReply(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DURATIONS_FIELD_NUMBER: builtins.int
    ENTRY_COUNT_FIELD_NUMBER: builtins.int
    ERRORS_FIELD_NUMBER: builtins.int
    EXISTS_FIELD_NUMBER: builtins.int
    entry_count: builtins.int
    """REQUIRED: The number of entries deleted in the database"""
    exists: builtins.bool
    """REQUIRED: Set to false if the requested database did not exist"""
    @property
    def durations(self) -> briar.briar_grpc.briar_pb2.BriarDurations: ...
    @property
    def errors(self) -> briar.briar_grpc.briar_error_pb2.BriarErrors:
        """Aggregate errors which happened mid-batch"""

    def __init__(
        self,
        *,
        durations: briar.briar_grpc.briar_pb2.BriarDurations | None = ...,
        entry_count: builtins.int = ...,
        errors: briar.briar_grpc.briar_error_pb2.BriarErrors | None = ...,
        exists: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["durations", b"durations", "errors", b"errors"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["durations", b"durations", "entry_count", b"entry_count", "errors", b"errors", "exists", b"exists"]) -> None: ...

global___DatabaseDeleteReply = DatabaseDeleteReply

@typing.final
class DatabaseRenameRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATABASE_FIELD_NUMBER: builtins.int
    DATABASE_NEW_FIELD_NUMBER: builtins.int
    @property
    def database(self) -> briar.briar_grpc.briar_pb2.BriarDatabase:
        """REQUIRED: Database to remove from"""

    @property
    def database_new(self) -> briar.briar_grpc.briar_pb2.BriarDatabase:
        """REQUIRED: Database to remove from"""

    def __init__(
        self,
        *,
        database: briar.briar_grpc.briar_pb2.BriarDatabase | None = ...,
        database_new: briar.briar_grpc.briar_pb2.BriarDatabase | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["database", b"database", "database_new", b"database_new"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["database", b"database", "database_new", b"database_new"]) -> None: ...

global___DatabaseRenameRequest = DatabaseRenameRequest

@typing.final
class DatabaseRenameReply(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DURATIONS_FIELD_NUMBER: builtins.int
    ERRORS_FIELD_NUMBER: builtins.int
    EXISTS_FIELD_NUMBER: builtins.int
    exists: builtins.bool
    """REQUIRED: Set to false if the requested database did not exist"""
    @property
    def durations(self) -> briar.briar_grpc.briar_pb2.BriarDurations: ...
    @property
    def errors(self) -> briar.briar_grpc.briar_error_pb2.BriarErrors:
        """Aggregate errors which happened mid-batch"""

    def __init__(
        self,
        *,
        durations: briar.briar_grpc.briar_pb2.BriarDurations | None = ...,
        errors: briar.briar_grpc.briar_error_pb2.BriarErrors | None = ...,
        exists: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["durations", b"durations", "errors", b"errors"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["durations", b"durations", "errors", b"errors", "exists", b"exists"]) -> None: ...

global___DatabaseRenameReply = DatabaseRenameReply

@typing.final
class DetectRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MEDIA_FIELD_NUMBER: builtins.int
    FRAME_FIELD_NUMBER: builtins.int
    SUBJECT_ID_FIELD_NUMBER: builtins.int
    MEDIA_ID_FIELD_NUMBER: builtins.int
    ENTRY_TYPE_FIELD_NUMBER: builtins.int
    ENTRY_NAME_FIELD_NUMBER: builtins.int
    DURATIONS_FIELD_NUMBER: builtins.int
    DETECT_OPTIONS_FIELD_NUMBER: builtins.int
    frame: builtins.int
    """What frame of the video this is"""
    subject_id: builtins.str
    """ID of subject this detection will belong to"""
    media_id: builtins.str
    """ID of media this detection will belong to"""
    entry_type: briar.briar_grpc.briar_pb2.EntryType.ValueType
    """	string entry_id = 3;                      // Optional unique id of subject the video
    Either 'subject' or 'media'
    """
    entry_name: builtins.str
    """Optional name of subject in the video"""
    @property
    def media(self) -> briar.briar_grpc.briar_pb2.BriarMedia:
        """The video media to detect from"""

    @property
    def durations(self) -> briar.briar_grpc.briar_pb2.BriarDurations:
        """Log the time needed to complete the request on the server"""

    @property
    def detect_options(self) -> briar.briar_grpc.briar_pb2.DetectionOptions:
        """Hyperparameters to run the detection with"""

    def __init__(
        self,
        *,
        media: briar.briar_grpc.briar_pb2.BriarMedia | None = ...,
        frame: builtins.int = ...,
        subject_id: builtins.str = ...,
        media_id: builtins.str = ...,
        entry_type: briar.briar_grpc.briar_pb2.EntryType.ValueType = ...,
        entry_name: builtins.str = ...,
        durations: briar.briar_grpc.briar_pb2.BriarDurations | None = ...,
        detect_options: briar.briar_grpc.briar_pb2.DetectionOptions | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["detect_options", b"detect_options", "durations", b"durations", "media", b"media"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["detect_options", b"detect_options", "durations", b"durations", "entry_name", b"entry_name", "entry_type", b"entry_type", "frame", b"frame", "media", b"media", "media_id", b"media_id", "subject_id", b"subject_id"]) -> None: ...

global___DetectRequest = DetectRequest

@typing.final
class DetectReply(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DETECTIONS_FIELD_NUMBER: builtins.int
    DURATIONS_FIELD_NUMBER: builtins.int
    FRAME_ID_FIELD_NUMBER: builtins.int
    MODALITY_FIELD_NUMBER: builtins.int
    ERRORS_FIELD_NUMBER: builtins.int
    PROGRESS_FIELD_NUMBER: builtins.int
    REFERENCE_MEDIA_FIELD_NUMBER: builtins.int
    PROGRESS_ONLY_REPLY_FIELD_NUMBER: builtins.int
    frame_id: builtins.int
    """REQUIRED: The id of the media frame associated with the detections."""
    modality: briar.briar_grpc.briar_pb2.BiometricModality.ValueType
    """OPTIONAL: the modality detected"""
    progress_only_reply: builtins.bool
    """REQUIRED: set to true if this is a reply only providing a progress update to the API. If progress_only_reply is set to True, nothing else in the reply needs to be populated"""
    @property
    def detections(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[briar.briar_grpc.briar_pb2.Detection]:
        """TODO: Fill in responses here.  Tracks, Optional Attributes, Optional Templates
        REQUIRED: Detections generated by detect
        """

    @property
    def durations(self) -> briar.briar_grpc.briar_pb2.BriarDurations:
        """REQUIRED: Log the time needed to complete the request on the server"""

    @property
    def errors(self) -> briar.briar_grpc.briar_error_pb2.BriarErrors: ...
    @property
    def progress(self) -> briar.briar_grpc.briar_pb2.BriarProgress:
        """REQUIRED: provides progress updates for progress bar display. See example code for details"""

    @property
    def reference_media(self) -> briar.briar_grpc.briar_pb2.BriarMedia:
        """OPTIONAL: put reference media here to return it to the API. This will slow down your API reply and is not currently used by the CLI"""

    def __init__(
        self,
        *,
        detections: collections.abc.Iterable[briar.briar_grpc.briar_pb2.Detection] | None = ...,
        durations: briar.briar_grpc.briar_pb2.BriarDurations | None = ...,
        frame_id: builtins.int = ...,
        modality: briar.briar_grpc.briar_pb2.BiometricModality.ValueType = ...,
        errors: briar.briar_grpc.briar_error_pb2.BriarErrors | None = ...,
        progress: briar.briar_grpc.briar_pb2.BriarProgress | None = ...,
        reference_media: briar.briar_grpc.briar_pb2.BriarMedia | None = ...,
        progress_only_reply: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["durations", b"durations", "errors", b"errors", "progress", b"progress", "reference_media", b"reference_media"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["detections", b"detections", "durations", b"durations", "errors", b"errors", "frame_id", b"frame_id", "modality", b"modality", "progress", b"progress", "progress_only_reply", b"progress_only_reply", "reference_media", b"reference_media"]) -> None: ...

global___DetectReply = DetectReply

@typing.final
class TrackRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MEDIA_FIELD_NUMBER: builtins.int
    SUBJECT_ID_FIELD_NUMBER: builtins.int
    SUBJECT_NAME_FIELD_NUMBER: builtins.int
    DURATIONS_FIELD_NUMBER: builtins.int
    DETECT_OPTIONS_FIELD_NUMBER: builtins.int
    subject_id: builtins.str
    """Optional unique id of subject the video"""
    subject_name: builtins.str
    """Optional name of subject in the video"""
    @property
    def media(self) -> briar.briar_grpc.briar_pb2.BriarMedia:
        """The video media to detect from"""

    @property
    def durations(self) -> briar.briar_grpc.briar_pb2.BriarDurations:
        """Log the time needed to complete the request on the server"""

    @property
    def detect_options(self) -> briar.briar_grpc.briar_pb2.DetectionOptions:
        """Hyperparameters to run the detection with"""

    def __init__(
        self,
        *,
        media: briar.briar_grpc.briar_pb2.BriarMedia | None = ...,
        subject_id: builtins.str = ...,
        subject_name: builtins.str = ...,
        durations: briar.briar_grpc.briar_pb2.BriarDurations | None = ...,
        detect_options: briar.briar_grpc.briar_pb2.DetectionOptions | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["detect_options", b"detect_options", "durations", b"durations", "media", b"media"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["detect_options", b"detect_options", "durations", b"durations", "media", b"media", "subject_id", b"subject_id", "subject_name", b"subject_name"]) -> None: ...

global___TrackRequest = TrackRequest

@typing.final
class TrackReply(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TRACKLETS_FIELD_NUMBER: builtins.int
    DURATIONS_FIELD_NUMBER: builtins.int
    FRAME_IDS_FIELD_NUMBER: builtins.int
    MODALITY_FIELD_NUMBER: builtins.int
    PROGRESS_FIELD_NUMBER: builtins.int
    ERRORS_FIELD_NUMBER: builtins.int
    PROGRESS_ONLY_REPLY_FIELD_NUMBER: builtins.int
    modality: briar.briar_grpc.briar_pb2.BiometricModality.ValueType
    """OPTIONAL: the modality of the track extracted"""
    progress_only_reply: builtins.bool
    """REQUIRED: set to true if this is a reply only providing a progress update to the API. If progress_only_reply is set to True, nothing else in the reply needs to be populated"""
    @property
    def tracklets(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[briar.briar_grpc.briar_pb2.Tracklet]:
        """REQUIRED: set of returned tracklets"""

    @property
    def durations(self) -> briar.briar_grpc.briar_pb2.BriarDurations: ...
    @property
    def frame_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """OPTIONAL: the frame IDs associated with the tracklets"""

    @property
    def progress(self) -> briar.briar_grpc.briar_pb2.BriarProgress:
        """OPTIONAL: provides progress updates for progress bar display. See example code for details"""

    @property
    def errors(self) -> briar.briar_grpc.briar_error_pb2.BriarErrors: ...
    def __init__(
        self,
        *,
        tracklets: collections.abc.Iterable[briar.briar_grpc.briar_pb2.Tracklet] | None = ...,
        durations: briar.briar_grpc.briar_pb2.BriarDurations | None = ...,
        frame_ids: collections.abc.Iterable[builtins.int] | None = ...,
        modality: briar.briar_grpc.briar_pb2.BiometricModality.ValueType = ...,
        progress: briar.briar_grpc.briar_pb2.BriarProgress | None = ...,
        errors: briar.briar_grpc.briar_error_pb2.BriarErrors | None = ...,
        progress_only_reply: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["durations", b"durations", "errors", b"errors", "progress", b"progress"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["durations", b"durations", "errors", b"errors", "frame_ids", b"frame_ids", "modality", b"modality", "progress", b"progress", "progress_only_reply", b"progress_only_reply", "tracklets", b"tracklets"]) -> None: ...

global___TrackReply = TrackReply

@typing.final
class ExtractRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MEDIA_FIELD_NUMBER: builtins.int
    DURATIONS_FIELD_NUMBER: builtins.int
    DETECTIONS_FIELD_NUMBER: builtins.int
    DETECT_OPTIONS_FIELD_NUMBER: builtins.int
    EXTRACT_OPTIONS_FIELD_NUMBER: builtins.int
    @property
    def media(self) -> briar.briar_grpc.briar_pb2.BriarMedia:
        """Image to extract features from"""

    @property
    def durations(self) -> briar.briar_grpc.briar_pb2.BriarDurations:
        """Log the time needed to complete the request on the server"""

    @property
    def detections(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[briar.briar_grpc.briar_pb2.Detection]:
        """Detections to extract features from"""

    @property
    def detect_options(self) -> briar.briar_grpc.briar_pb2.DetectionOptions:
        """Detection options"""

    @property
    def extract_options(self) -> briar.briar_grpc.briar_pb2.ExtractOptions:
        """Extraction options"""

    def __init__(
        self,
        *,
        media: briar.briar_grpc.briar_pb2.BriarMedia | None = ...,
        durations: briar.briar_grpc.briar_pb2.BriarDurations | None = ...,
        detections: collections.abc.Iterable[briar.briar_grpc.briar_pb2.Detection] | None = ...,
        detect_options: briar.briar_grpc.briar_pb2.DetectionOptions | None = ...,
        extract_options: briar.briar_grpc.briar_pb2.ExtractOptions | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["detect_options", b"detect_options", "durations", b"durations", "extract_options", b"extract_options", "media", b"media"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["detect_options", b"detect_options", "detections", b"detections", "durations", b"durations", "extract_options", b"extract_options", "media", b"media"]) -> None: ...

global___ExtractRequest = ExtractRequest

@typing.final
class ExtractReply(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TEMPLATES_FIELD_NUMBER: builtins.int
    FRAME_ID_FIELD_NUMBER: builtins.int
    DURATIONS_FIELD_NUMBER: builtins.int
    MODALITY_FIELD_NUMBER: builtins.int
    DETECT_REPLY_FIELD_NUMBER: builtins.int
    TRACK_REPLY_FIELD_NUMBER: builtins.int
    ERRORS_FIELD_NUMBER: builtins.int
    PROGRESS_FIELD_NUMBER: builtins.int
    PROGRESS_ONLY_REPLY_FIELD_NUMBER: builtins.int
    frame_id: builtins.int
    """OPTIONAL: Id of the media frame associated with the extract"""
    modality: briar.briar_grpc.briar_pb2.BiometricModality.ValueType
    """OPTIONAL: the modality of the templates extracted"""
    progress_only_reply: builtins.bool
    """REQUIRED: set to true if this is a reply only providing a progress update to the API. If progress_only_reply is set to True, nothing else in the reply needs to be populated"""
    @property
    def templates(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[briar.briar_grpc.briar_pb2.Template]:
        """REQUIRED: Extracted features"""

    @property
    def durations(self) -> briar.briar_grpc.briar_pb2.BriarDurations:
        """Log the time needed to complete the request on the server"""

    @property
    def detect_reply(self) -> global___DetectReply:
        """OPTIONAL: the detect reply associated with the extraction if the service is sending intermediate detection results back to the client"""

    @property
    def track_reply(self) -> global___TrackReply:
        """OPTIONAL: the track reply associated with the extraction if the service is sending intermediate detection results back to the client"""

    @property
    def errors(self) -> briar.briar_grpc.briar_error_pb2.BriarErrors: ...
    @property
    def progress(self) -> briar.briar_grpc.briar_pb2.BriarProgress:
        """OPTIONAL: provides progress updates for progress bar display. See example code for details"""

    def __init__(
        self,
        *,
        templates: collections.abc.Iterable[briar.briar_grpc.briar_pb2.Template] | None = ...,
        frame_id: builtins.int = ...,
        durations: briar.briar_grpc.briar_pb2.BriarDurations | None = ...,
        modality: briar.briar_grpc.briar_pb2.BiometricModality.ValueType = ...,
        detect_reply: global___DetectReply | None = ...,
        track_reply: global___TrackReply | None = ...,
        errors: briar.briar_grpc.briar_error_pb2.BriarErrors | None = ...,
        progress: briar.briar_grpc.briar_pb2.BriarProgress | None = ...,
        progress_only_reply: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["detect_reply", b"detect_reply", "durations", b"durations", "errors", b"errors", "progress", b"progress", "track_reply", b"track_reply"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["detect_reply", b"detect_reply", "durations", b"durations", "errors", b"errors", "frame_id", b"frame_id", "modality", b"modality", "progress", b"progress", "progress_only_reply", b"progress_only_reply", "templates", b"templates", "track_reply", b"track_reply"]) -> None: ...

global___ExtractReply = ExtractReply

@typing.final
class DatabaseRetrieveRequest(google.protobuf.message.Message):
    """OPTIONAL: request that returns a databases contents to the client.  Could be very slow"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATABASE_FIELD_NUMBER: builtins.int
    IDS_FIELD_NUMBER: builtins.int
    DURATIONS_FIELD_NUMBER: builtins.int
    @property
    def database(self) -> briar.briar_grpc.briar_pb2.BriarDatabase:
        """Database to retrieve from"""

    @property
    def ids(self) -> briar.briar_grpc.briar_pb2.TemplateIds: ...
    @property
    def durations(self) -> briar.briar_grpc.briar_pb2.BriarDurations:
        """Log the time needed to complete the request on the server"""

    def __init__(
        self,
        *,
        database: briar.briar_grpc.briar_pb2.BriarDatabase | None = ...,
        ids: briar.briar_grpc.briar_pb2.TemplateIds | None = ...,
        durations: briar.briar_grpc.briar_pb2.BriarDurations | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["database", b"database", "durations", b"durations", "ids", b"ids"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["database", b"database", "durations", b"durations", "ids", b"ids"]) -> None: ...

global___DatabaseRetrieveRequest = DatabaseRetrieveRequest

@typing.final
class DatabaseRetrieveReply(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TEMPLATES_FIELD_NUMBER: builtins.int
    RECORDS_FIELD_NUMBER: builtins.int
    DURATIONS_FIELD_NUMBER: builtins.int
    ERRORS_FIELD_NUMBER: builtins.int
    @property
    def templates(self) -> briar.briar_grpc.briar_pb2.TemplateList:
        """UNIMPLEMENTED"""

    @property
    def records(self) -> briar.briar_grpc.briar_pb2.TemplateList:
        """DEPRICATED: duplicate output."""

    @property
    def durations(self) -> briar.briar_grpc.briar_pb2.BriarDurations:
        """UNIMPLEMENTED: Log the time needed to complete the request on the server"""

    @property
    def errors(self) -> briar.briar_grpc.briar_error_pb2.BriarErrors: ...
    def __init__(
        self,
        *,
        templates: briar.briar_grpc.briar_pb2.TemplateList | None = ...,
        records: briar.briar_grpc.briar_pb2.TemplateList | None = ...,
        durations: briar.briar_grpc.briar_pb2.BriarDurations | None = ...,
        errors: briar.briar_grpc.briar_error_pb2.BriarErrors | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["durations", b"durations", "errors", b"errors", "records", b"records", "templates", b"templates"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["durations", b"durations", "errors", b"errors", "records", b"records", "templates", b"templates"]) -> None: ...

global___DatabaseRetrieveReply = DatabaseRetrieveReply

@typing.final
class EnrollCustomRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SIGSET_ENCODED_FIELD_NUMBER: builtins.int
    SIGSET_NAME_FIELD_NUMBER: builtins.int
    DATABASE_FIELD_NUMBER: builtins.int
    DURATIONS_FIELD_NUMBER: builtins.int
    DETECT_OPTIONS_FIELD_NUMBER: builtins.int
    EXTRACT_OPTIONS_FIELD_NUMBER: builtins.int
    ENROLL_OPTIONS_FIELD_NUMBER: builtins.int
    sigset_encoded: builtins.bytes
    """The signature set in an encoded json format created from a Pandas dataframe."""
    sigset_name: builtins.str
    """The name of the sigset"""
    @property
    def database(self) -> briar.briar_grpc.briar_pb2.BriarDatabase:
        """The database to enroll into"""

    @property
    def durations(self) -> briar.briar_grpc.briar_pb2.BriarDurations:
        """Log the time needed to complete the request on the server"""

    @property
    def detect_options(self) -> briar.briar_grpc.briar_pb2.DetectionOptions:
        """Hyperparameters to run the detection with"""

    @property
    def extract_options(self) -> briar.briar_grpc.briar_pb2.ExtractOptions:
        """Hyperparameters to run the extraction with"""

    @property
    def enroll_options(self) -> briar.briar_grpc.briar_pb2.EnrollOptions:
        """How this is to be enrolled in the database"""

    def __init__(
        self,
        *,
        sigset_encoded: builtins.bytes = ...,
        sigset_name: builtins.str = ...,
        database: briar.briar_grpc.briar_pb2.BriarDatabase | None = ...,
        durations: briar.briar_grpc.briar_pb2.BriarDurations | None = ...,
        detect_options: briar.briar_grpc.briar_pb2.DetectionOptions | None = ...,
        extract_options: briar.briar_grpc.briar_pb2.ExtractOptions | None = ...,
        enroll_options: briar.briar_grpc.briar_pb2.EnrollOptions | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["database", b"database", "detect_options", b"detect_options", "durations", b"durations", "enroll_options", b"enroll_options", "extract_options", b"extract_options"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["database", b"database", "detect_options", b"detect_options", "durations", b"durations", "enroll_options", b"enroll_options", "extract_options", b"extract_options", "sigset_encoded", b"sigset_encoded", "sigset_name", b"sigset_name"]) -> None: ...

global___EnrollCustomRequest = EnrollCustomRequest

@typing.final
class EnrollRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MEDIA_FIELD_NUMBER: builtins.int
    FRAME_FIELD_NUMBER: builtins.int
    DATABASE_FIELD_NUMBER: builtins.int
    MEDIA_ID_FIELD_NUMBER: builtins.int
    SUBJECT_IDS_FIELD_NUMBER: builtins.int
    TRACKS_FIELD_NUMBER: builtins.int
    ENROLL_FLAG_FIELD_NUMBER: builtins.int
    DETECTIONS_FIELD_NUMBER: builtins.int
    TEMPLATE_FIELD_NUMBER: builtins.int
    RECORD_FIELD_NUMBER: builtins.int
    DURATIONS_FIELD_NUMBER: builtins.int
    DETECT_OPTIONS_FIELD_NUMBER: builtins.int
    EXTRACT_OPTIONS_FIELD_NUMBER: builtins.int
    ENROLL_OPTIONS_FIELD_NUMBER: builtins.int
    SUBJECT_ID_INTEGER_FIELD_NUMBER: builtins.int
    frame: builtins.int
    """What frame of the video this is"""
    media_id: builtins.str
    """OPTIONAL unique id of the given input media.  If not provide a unique id
    should be assigned by the service: UNKNOWN_################.
    """
    enroll_flag: briar.briar_grpc.briar_pb2.EnrollFlags.ValueType
    """How to run the enrollement"""
    subject_id_integer: builtins.int
    """DEPRICATED: FOR LEGACY SYSTEMS ONLY. Provides an integer-version of a subject ID"""
    @property
    def media(self) -> briar.briar_grpc.briar_pb2.BriarMedia:
        """The image or video media to process"""

    @property
    def database(self) -> briar.briar_grpc.briar_pb2.BriarDatabase:
        """The database to enroll into"""

    @property
    def subject_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """OPTIONAL unique id of the given input subject within a media.  If not provide a unique id
        should be assigned by the service: UNKNOWN_################.
        """

    @property
    def tracks(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[briar.briar_grpc.briar_pb2.Tracklet]:
        """OPTIONAL name of subject in the video.

        OPTIONAL Clients may provide a list of tracks from external algorithms
        that should be used instead of internal detection algorithms.
        """

    @property
    def detections(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[briar.briar_grpc.briar_pb2.Detection]:
        """OPTIONAL user specified detection to extract image from"""

    @property
    def template(self) -> briar.briar_grpc.briar_pb2.Template:
        """OPTIONAL User specified template to enroll bypasing detect and extract"""

    @property
    def record(self) -> briar.briar_grpc.briar_pb2.Record:
        """DEPRICATED: records are not used at this time."""

    @property
    def durations(self) -> briar.briar_grpc.briar_pb2.BriarDurations:
        """Log the time needed to complete the request on the server"""

    @property
    def detect_options(self) -> briar.briar_grpc.briar_pb2.DetectionOptions:
        """Hyperparameters to run the detection with"""

    @property
    def extract_options(self) -> briar.briar_grpc.briar_pb2.ExtractOptions:
        """Hyperparameters to run the extraction with"""

    @property
    def enroll_options(self) -> briar.briar_grpc.briar_pb2.EnrollOptions:
        """How this is to be enrolled in the database"""

    def __init__(
        self,
        *,
        media: briar.briar_grpc.briar_pb2.BriarMedia | None = ...,
        frame: builtins.int = ...,
        database: briar.briar_grpc.briar_pb2.BriarDatabase | None = ...,
        media_id: builtins.str = ...,
        subject_ids: collections.abc.Iterable[builtins.str] | None = ...,
        tracks: collections.abc.Iterable[briar.briar_grpc.briar_pb2.Tracklet] | None = ...,
        enroll_flag: briar.briar_grpc.briar_pb2.EnrollFlags.ValueType = ...,
        detections: collections.abc.Iterable[briar.briar_grpc.briar_pb2.Detection] | None = ...,
        template: briar.briar_grpc.briar_pb2.Template | None = ...,
        record: briar.briar_grpc.briar_pb2.Record | None = ...,
        durations: briar.briar_grpc.briar_pb2.BriarDurations | None = ...,
        detect_options: briar.briar_grpc.briar_pb2.DetectionOptions | None = ...,
        extract_options: briar.briar_grpc.briar_pb2.ExtractOptions | None = ...,
        enroll_options: briar.briar_grpc.briar_pb2.EnrollOptions | None = ...,
        subject_id_integer: builtins.int = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["database", b"database", "detect_options", b"detect_options", "durations", b"durations", "enroll_options", b"enroll_options", "extract_options", b"extract_options", "media", b"media", "record", b"record", "template", b"template"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["database", b"database", "detect_options", b"detect_options", "detections", b"detections", "durations", b"durations", "enroll_flag", b"enroll_flag", "enroll_options", b"enroll_options", "extract_options", b"extract_options", "frame", b"frame", "media", b"media", "media_id", b"media_id", "record", b"record", "subject_id_integer", b"subject_id_integer", "subject_ids", b"subject_ids", "template", b"template", "tracks", b"tracks"]) -> None: ...

global___EnrollRequest = EnrollRequest

@typing.final
class EnrollReply(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DETECTIONS_FIELD_NUMBER: builtins.int
    DURATIONS_FIELD_NUMBER: builtins.int
    FRAME_ID_FIELD_NUMBER: builtins.int
    DETECT_REPLY_FIELD_NUMBER: builtins.int
    TRACK_REPLY_FIELD_NUMBER: builtins.int
    EXTRACT_REPLY_FIELD_NUMBER: builtins.int
    ERRORS_FIELD_NUMBER: builtins.int
    ENROLLMENTS_FIELD_NUMBER: builtins.int
    PROGRESS_FIELD_NUMBER: builtins.int
    PROGRESS_ONLY_REPLY_FIELD_NUMBER: builtins.int
    frame_id: builtins.int
    """OPTIONAL: The id of the media frame associated with the detections."""
    progress_only_reply: builtins.bool
    """REQUIRED: set to true if this is a reply only providing a progress update to the API. If progress_only_reply is set to True, nothing else in the reply needs to be populated"""
    @property
    def detections(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[briar.briar_grpc.briar_pb2.Detection]:
        """DEPRICATED: FOR LEGACY SYSTEMS ONLY. use detect_reply instead. Detections generated by auto-detect"""

    @property
    def durations(self) -> briar.briar_grpc.briar_pb2.BriarDurations:
        """Log the time needed to complete the request on the server"""

    @property
    def detect_reply(self) -> global___DetectReply:
        """OPTIONAL: A dectect reply to be populated if the service is sending intermediate detection results back to the client"""

    @property
    def track_reply(self) -> global___TrackReply:
        """OPTIONAL: A track reply to be populated if the service is sending intermediate detection results back to the client"""

    @property
    def extract_reply(self) -> global___ExtractReply:
        """OPTIONAL: An extract reply to be populated if the service is sending intermediate extraction results back to the client"""

    @property
    def errors(self) -> briar.briar_grpc.briar_error_pb2.BriarErrors: ...
    @property
    def enrollments(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[briar.briar_grpc.briar_pb2.EnrollmentInfo]:
        """OPTIONAL: Information about the enrollments"""

    @property
    def progress(self) -> briar.briar_grpc.briar_pb2.BriarProgress:
        """OPTIONAL: provides progress updates for progress bar display. See example code for details"""

    def __init__(
        self,
        *,
        detections: collections.abc.Iterable[briar.briar_grpc.briar_pb2.Detection] | None = ...,
        durations: briar.briar_grpc.briar_pb2.BriarDurations | None = ...,
        frame_id: builtins.int = ...,
        detect_reply: global___DetectReply | None = ...,
        track_reply: global___TrackReply | None = ...,
        extract_reply: global___ExtractReply | None = ...,
        errors: briar.briar_grpc.briar_error_pb2.BriarErrors | None = ...,
        enrollments: collections.abc.Iterable[briar.briar_grpc.briar_pb2.EnrollmentInfo] | None = ...,
        progress: briar.briar_grpc.briar_pb2.BriarProgress | None = ...,
        progress_only_reply: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["detect_reply", b"detect_reply", "durations", b"durations", "errors", b"errors", "extract_reply", b"extract_reply", "progress", b"progress", "track_reply", b"track_reply"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["detect_reply", b"detect_reply", "detections", b"detections", "durations", b"durations", "enrollments", b"enrollments", "errors", b"errors", "extract_reply", b"extract_reply", "frame_id", b"frame_id", "progress", b"progress", "progress_only_reply", b"progress_only_reply", "track_reply", b"track_reply"]) -> None: ...

global___EnrollReply = EnrollReply

@typing.final
class VerifyRequest(google.protobuf.message.Message):
    """Performs 1-to-1 Media Verification in a streaming paradigm (streams reference media in first, then streams in verification media"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _VerifyRole:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _VerifyRoleEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[VerifyRequest._VerifyRole.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        reference: VerifyRequest._VerifyRole.ValueType  # 0
        verify: VerifyRequest._VerifyRole.ValueType  # 1

    class VerifyRole(_VerifyRole, metaclass=_VerifyRoleEnumTypeWrapper): ...
    reference: VerifyRequest.VerifyRole.ValueType  # 0
    verify: VerifyRequest.VerifyRole.ValueType  # 1

    MEDIA_FIELD_NUMBER: builtins.int
    ROLE_FIELD_NUMBER: builtins.int
    DETECTIONS_FIELD_NUMBER: builtins.int
    REFERENCE_TMPLS_FIELD_NUMBER: builtins.int
    DURATIONS_FIELD_NUMBER: builtins.int
    DETECT_OPTIONS_FIELD_NUMBER: builtins.int
    EXTRACT_OPTIONS_FIELD_NUMBER: builtins.int
    VERIFY_OPTIONS_FIELD_NUMBER: builtins.int
    FLAG_FIELD_NUMBER: builtins.int
    role: global___VerifyRequest.VerifyRole.ValueType
    """REQUIRED set this to "reference" for all reference input, and "verify" if if the given request contains media to be verified"""
    flag: briar.briar_grpc.briar_pb2.VerifyFlags.ValueType
    """flags to control whether to verify from templates, images, or detections+images"""
    @property
    def media(self) -> briar.briar_grpc.briar_pb2.BriarMedia:
        """REQUIRED Frames to be verified."""

    @property
    def detections(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[briar.briar_grpc.briar_pb2.Detection]:
        """OPTIONAL Reference Images"""

    @property
    def reference_tmpls(self) -> briar.briar_grpc.briar_pb2.TemplateList:
        """OPTIONAL Reference Templates"""

    @property
    def durations(self) -> briar.briar_grpc.briar_pb2.BriarDurations:
        """Log the time needed to complete the request on the server"""

    @property
    def detect_options(self) -> briar.briar_grpc.briar_pb2.DetectionOptions:
        """REQUIRED options for detection"""

    @property
    def extract_options(self) -> briar.briar_grpc.briar_pb2.ExtractOptions:
        """REQUIRED options for extraction"""

    @property
    def verify_options(self) -> briar.briar_grpc.briar_pb2.VerifyOptions:
        """REQUIRED options for verification"""

    def __init__(
        self,
        *,
        media: briar.briar_grpc.briar_pb2.BriarMedia | None = ...,
        role: global___VerifyRequest.VerifyRole.ValueType = ...,
        detections: collections.abc.Iterable[briar.briar_grpc.briar_pb2.Detection] | None = ...,
        reference_tmpls: briar.briar_grpc.briar_pb2.TemplateList | None = ...,
        durations: briar.briar_grpc.briar_pb2.BriarDurations | None = ...,
        detect_options: briar.briar_grpc.briar_pb2.DetectionOptions | None = ...,
        extract_options: briar.briar_grpc.briar_pb2.ExtractOptions | None = ...,
        verify_options: briar.briar_grpc.briar_pb2.VerifyOptions | None = ...,
        flag: briar.briar_grpc.briar_pb2.VerifyFlags.ValueType = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["detect_options", b"detect_options", "durations", b"durations", "extract_options", b"extract_options", "media", b"media", "reference_tmpls", b"reference_tmpls", "verify_options", b"verify_options"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["detect_options", b"detect_options", "detections", b"detections", "durations", b"durations", "extract_options", b"extract_options", "flag", b"flag", "media", b"media", "reference_tmpls", b"reference_tmpls", "role", b"role", "verify_options", b"verify_options"]) -> None: ...

global___VerifyRequest = VerifyRequest

@typing.final
class VerifyReply(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SIMILARITIES_FIELD_NUMBER: builtins.int
    DURATIONS_FIELD_NUMBER: builtins.int
    DETECT_REPLY_FIELD_NUMBER: builtins.int
    EXTRACT_REPLY_FIELD_NUMBER: builtins.int
    ERRORS_FIELD_NUMBER: builtins.int
    PROGRESS_ONLY_REPLY_FIELD_NUMBER: builtins.int
    progress_only_reply: builtins.bool
    """REQUIRED: set to true if this is a reply only providing a progress update to the API. If progress_only_reply is set to True, nothing else in the reply needs to be populated"""
    @property
    def similarities(self) -> briar.briar_grpc.briar_pb2.VerifyMatchList:
        """REQUIRED: Match list showing similarities"""

    @property
    def durations(self) -> briar.briar_grpc.briar_pb2.BriarDurations:
        """Log the time needed to complete the request on the server"""

    @property
    def detect_reply(self) -> global___DetectReply:
        """OPTIONAL: A dectect reply to be populated if the service is sending intermediate detection results back to the client"""

    @property
    def extract_reply(self) -> global___ExtractReply:
        """OPTIONAL: An extract reply to be populated if the service is sending intermediate extraction results back to the client"""

    @property
    def errors(self) -> briar.briar_grpc.briar_error_pb2.BriarErrors: ...
    def __init__(
        self,
        *,
        similarities: briar.briar_grpc.briar_pb2.VerifyMatchList | None = ...,
        durations: briar.briar_grpc.briar_pb2.BriarDurations | None = ...,
        detect_reply: global___DetectReply | None = ...,
        extract_reply: global___ExtractReply | None = ...,
        errors: briar.briar_grpc.briar_error_pb2.BriarErrors | None = ...,
        progress_only_reply: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["detect_reply", b"detect_reply", "durations", b"durations", "errors", b"errors", "extract_reply", b"extract_reply", "similarities", b"similarities"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["detect_reply", b"detect_reply", "durations", b"durations", "errors", b"errors", "extract_reply", b"extract_reply", "progress_only_reply", b"progress_only_reply", "similarities", b"similarities"]) -> None: ...

global___VerifyReply = VerifyReply

@typing.final
class SearchRequest(google.protobuf.message.Message):
    """There are three options on how to run a search.
    Selection 1) Supply probe media and search for any people detected.
    Selection 2) Supply previously extracted templates.
    Selection 3) Supply a previously extracted database and search for probes in that database.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATABASE_FIELD_NUMBER: builtins.int
    MEDIA_FIELD_NUMBER: builtins.int
    DETECTIONS_FIELD_NUMBER: builtins.int
    PROBES_FIELD_NUMBER: builtins.int
    DETECT_OPTIONS_FIELD_NUMBER: builtins.int
    EXTRACT_OPTIONS_FIELD_NUMBER: builtins.int
    SEARCH_OPTIONS_FIELD_NUMBER: builtins.int
    DURATIONS_FIELD_NUMBER: builtins.int
    @property
    def database(self) -> briar.briar_grpc.briar_pb2.BriarDatabase:
        """REQUIRED: Database to search"""

    @property
    def media(self) -> briar.briar_grpc.briar_pb2.BriarMedia:
        """SELECTION 1: Image to extract probe template from"""

    @property
    def detections(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[briar.briar_grpc.briar_pb2.Detection]:
        """OPTIONAL: Detection to extract probe template from"""

    @property
    def probes(self) -> briar.briar_grpc.briar_pb2.TemplateList:
        """SELECTION 2: Templates to search"""

    @property
    def detect_options(self) -> briar.briar_grpc.briar_pb2.DetectionOptions: ...
    @property
    def extract_options(self) -> briar.briar_grpc.briar_pb2.ExtractOptions: ...
    @property
    def search_options(self) -> briar.briar_grpc.briar_pb2.SearchOptions: ...
    @property
    def durations(self) -> briar.briar_grpc.briar_pb2.BriarDurations:
        """Log the time needed to complete the request on the server"""

    def __init__(
        self,
        *,
        database: briar.briar_grpc.briar_pb2.BriarDatabase | None = ...,
        media: briar.briar_grpc.briar_pb2.BriarMedia | None = ...,
        detections: collections.abc.Iterable[briar.briar_grpc.briar_pb2.Detection] | None = ...,
        probes: briar.briar_grpc.briar_pb2.TemplateList | None = ...,
        detect_options: briar.briar_grpc.briar_pb2.DetectionOptions | None = ...,
        extract_options: briar.briar_grpc.briar_pb2.ExtractOptions | None = ...,
        search_options: briar.briar_grpc.briar_pb2.SearchOptions | None = ...,
        durations: briar.briar_grpc.briar_pb2.BriarDurations | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["database", b"database", "detect_options", b"detect_options", "durations", b"durations", "extract_options", b"extract_options", "media", b"media", "probes", b"probes", "search_options", b"search_options"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["database", b"database", "detect_options", b"detect_options", "detections", b"detections", "durations", b"durations", "extract_options", b"extract_options", "media", b"media", "probes", b"probes", "search_options", b"search_options"]) -> None: ...

global___SearchRequest = SearchRequest

@typing.final
class SearchDatabaseRequest(google.protobuf.message.Message):
    """This is a search that takes a gallery database and a probe database, and searches all probes against the gallery"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATABASE_FIELD_NUMBER: builtins.int
    PROBE_DATABASE_FIELD_NUMBER: builtins.int
    PROBE_ENTRY_IDS_FIELD_NUMBER: builtins.int
    SEARCH_OPTIONS_FIELD_NUMBER: builtins.int
    DURATIONS_FIELD_NUMBER: builtins.int
    @property
    def database(self) -> briar.briar_grpc.briar_pb2.BriarDatabase:
        """REQUIRED: Database to search"""

    @property
    def probe_database(self) -> briar.briar_grpc.briar_pb2.BriarDatabase:
        """REQUIRED: probe database to to use as probe entries, instead of a BriarMedia"""

    @property
    def probe_entry_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """OPTIONAL: the list of probe database entries to search.  If empty search the entire probe database."""

    @property
    def search_options(self) -> briar.briar_grpc.briar_pb2.SearchOptions:
        """search options from the API call"""

    @property
    def durations(self) -> briar.briar_grpc.briar_pb2.BriarDurations:
        """Log the time needed to complete the request on the server"""

    def __init__(
        self,
        *,
        database: briar.briar_grpc.briar_pb2.BriarDatabase | None = ...,
        probe_database: briar.briar_grpc.briar_pb2.BriarDatabase | None = ...,
        probe_entry_ids: collections.abc.Iterable[builtins.str] | None = ...,
        search_options: briar.briar_grpc.briar_pb2.SearchOptions | None = ...,
        durations: briar.briar_grpc.briar_pb2.BriarDurations | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["database", b"database", "durations", b"durations", "probe_database", b"probe_database", "search_options", b"search_options"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["database", b"database", "durations", b"durations", "probe_database", b"probe_database", "probe_entry_ids", b"probe_entry_ids", "search_options", b"search_options"]) -> None: ...

global___SearchDatabaseRequest = SearchDatabaseRequest

@typing.final
class SearchReply(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SIMILARITIES_FIELD_NUMBER: builtins.int
    PROBE_DETECTIONS_FIELD_NUMBER: builtins.int
    DURATIONS_FIELD_NUMBER: builtins.int
    DETECT_REPLY_FIELD_NUMBER: builtins.int
    EXTRACT_REPLY_FIELD_NUMBER: builtins.int
    ERRORS_FIELD_NUMBER: builtins.int
    PROGRESS_FIELD_NUMBER: builtins.int
    PROGRESS_ONLY_REPLY_FIELD_NUMBER: builtins.int
    progress_only_reply: builtins.bool
    """REQUIRED: set to true if this is a reply only providing a progress update to the API. If progress_only_reply is set to True, nothing else in the reply needs to be populated"""
    @property
    def similarities(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[briar.briar_grpc.briar_pb2.SearchMatchList]:
        """REQUIRED: Return: List list of similarities (results). There should be one SearchMatchList per detected entity within the probe"""

    @property
    def probe_detections(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[briar.briar_grpc.briar_pb2.Detection]:
        """OPTIONAL: Return: In the case of multiple probes within a single image, A list of detection locations on the probe image that the matchlists belong to"""

    @property
    def durations(self) -> briar.briar_grpc.briar_pb2.BriarDurations:
        """Log the time needed to complete the request on the server"""

    @property
    def detect_reply(self) -> global___DetectReply:
        """OPTIONAL: A detect reply to be populated if the service is sending intermediate detection results back to the client"""

    @property
    def extract_reply(self) -> global___ExtractReply:
        """OPTIONAL: An extract reply to be populated if the service is sending intermediate extraction results back to the client"""

    @property
    def errors(self) -> briar.briar_grpc.briar_error_pb2.BriarErrors: ...
    @property
    def progress(self) -> briar.briar_grpc.briar_pb2.BriarProgress:
        """OPTIONAL: provides progress updates for progress bar display. See example code for details"""

    def __init__(
        self,
        *,
        similarities: collections.abc.Iterable[briar.briar_grpc.briar_pb2.SearchMatchList] | None = ...,
        probe_detections: collections.abc.Iterable[briar.briar_grpc.briar_pb2.Detection] | None = ...,
        durations: briar.briar_grpc.briar_pb2.BriarDurations | None = ...,
        detect_reply: global___DetectReply | None = ...,
        extract_reply: global___ExtractReply | None = ...,
        errors: briar.briar_grpc.briar_error_pb2.BriarErrors | None = ...,
        progress: briar.briar_grpc.briar_pb2.BriarProgress | None = ...,
        progress_only_reply: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["detect_reply", b"detect_reply", "durations", b"durations", "errors", b"errors", "extract_reply", b"extract_reply", "progress", b"progress"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["detect_reply", b"detect_reply", "durations", b"durations", "errors", b"errors", "extract_reply", b"extract_reply", "probe_detections", b"probe_detections", "progress", b"progress", "progress_only_reply", b"progress_only_reply", "similarities", b"similarities"]) -> None: ...

global___SearchReply = SearchReply

@typing.final
class SearchDatabaseReply(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SIMILARITIES_FIELD_NUMBER: builtins.int
    DURATIONS_FIELD_NUMBER: builtins.int
    ERRORS_FIELD_NUMBER: builtins.int
    PROGRESS_FIELD_NUMBER: builtins.int
    @property
    def similarities(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[briar.briar_grpc.briar_pb2.SearchMatchList]:
        """REQUIRED: Return: List of similarities in scored order"""

    @property
    def durations(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[briar.briar_grpc.briar_pb2.BriarDurations]:
        """Log the time needed to complete the request on the server"""

    @property
    def errors(self) -> briar.briar_grpc.briar_error_pb2.BriarErrors: ...
    @property
    def progress(self) -> briar.briar_grpc.briar_pb2.BriarProgress:
        """OPTIONAL: provides progress updates for progress bar display. See example code for details"""

    def __init__(
        self,
        *,
        similarities: collections.abc.Iterable[briar.briar_grpc.briar_pb2.SearchMatchList] | None = ...,
        durations: collections.abc.Iterable[briar.briar_grpc.briar_pb2.BriarDurations] | None = ...,
        errors: briar.briar_grpc.briar_error_pb2.BriarErrors | None = ...,
        progress: briar.briar_grpc.briar_pb2.BriarProgress | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["errors", b"errors", "progress", b"progress"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["durations", b"durations", "errors", b"errors", "progress", b"progress", "similarities", b"similarities"]) -> None: ...

global___SearchDatabaseReply = SearchDatabaseReply

@typing.final
class VerifyDatabaseRequest(google.protobuf.message.Message):
    """This is a search that takes a gallery database and a probe database, and searches all probes against the gallery"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    REFERENCE_DATABASE_FIELD_NUMBER: builtins.int
    VERIFY_DATABASE_FIELD_NUMBER: builtins.int
    PROBE_ENTRY_IDS_FIELD_NUMBER: builtins.int
    VERIFY_OPTIONS_FIELD_NUMBER: builtins.int
    DURATIONS_FIELD_NUMBER: builtins.int
    @property
    def reference_database(self) -> briar.briar_grpc.briar_pb2.BriarDatabase:
        """REQUIRED: Database to search"""

    @property
    def verify_database(self) -> briar.briar_grpc.briar_pb2.BriarDatabase:
        """SELECTION 1: probe database to to use as probe entries, instead of a BriarMedia"""

    @property
    def probe_entry_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """OPTIONAL: the list of probe database entries to search.  If empty search the entire probe database."""

    @property
    def verify_options(self) -> briar.briar_grpc.briar_pb2.VerifyOptions: ...
    @property
    def durations(self) -> briar.briar_grpc.briar_pb2.BriarDurations:
        """Log the time needed to complete the request on the server"""

    def __init__(
        self,
        *,
        reference_database: briar.briar_grpc.briar_pb2.BriarDatabase | None = ...,
        verify_database: briar.briar_grpc.briar_pb2.BriarDatabase | None = ...,
        probe_entry_ids: collections.abc.Iterable[builtins.str] | None = ...,
        verify_options: briar.briar_grpc.briar_pb2.VerifyOptions | None = ...,
        durations: briar.briar_grpc.briar_pb2.BriarDurations | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["durations", b"durations", "reference_database", b"reference_database", "verify_database", b"verify_database", "verify_options", b"verify_options"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["durations", b"durations", "probe_entry_ids", b"probe_entry_ids", "reference_database", b"reference_database", "verify_database", b"verify_database", "verify_options", b"verify_options"]) -> None: ...

global___VerifyDatabaseRequest = VerifyDatabaseRequest

@typing.final
class VerifyDatabaseReply(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class MatrixProbeDetectionsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> briar.briar_grpc.briar_pb2.Detection: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: briar.briar_grpc.briar_pb2.Detection | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    @typing.final
    class MatrixGalleryDetectionsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> briar.briar_grpc.briar_pb2.Detection: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: briar.briar_grpc.briar_pb2.Detection | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    @typing.final
    class MatrixProbeTrackletsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> briar.briar_grpc.briar_pb2.Tracklet: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: briar.briar_grpc.briar_pb2.Tracklet | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    @typing.final
    class MatrixGalleryTrackletsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> briar.briar_grpc.briar_pb2.Tracklet: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: briar.briar_grpc.briar_pb2.Tracklet | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    @typing.final
    class MatrixProbeAttributesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> briar.briar_grpc.briar_pb2.MediaMetadata: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: briar.briar_grpc.briar_pb2.MediaMetadata | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    @typing.final
    class MatrixGalleryAttributesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> briar.briar_grpc.briar_pb2.MediaMetadata: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: briar.briar_grpc.briar_pb2.MediaMetadata | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    MATCH_MATRIX_FIELD_NUMBER: builtins.int
    MATRIX_PROBE_DETECTIONS_FIELD_NUMBER: builtins.int
    MATRIX_GALLERY_DETECTIONS_FIELD_NUMBER: builtins.int
    MATRIX_PROBE_TRACKLETS_FIELD_NUMBER: builtins.int
    MATRIX_GALLERY_TRACKLETS_FIELD_NUMBER: builtins.int
    MATRIX_PROBE_ATTRIBUTES_FIELD_NUMBER: builtins.int
    MATRIX_GALLERY_ATTRIBUTES_FIELD_NUMBER: builtins.int
    USES_INTEGER_SUBJECT_ID_GALLERY_FIELD_NUMBER: builtins.int
    ERRORS_FIELD_NUMBER: builtins.int
    PROGRESS_FIELD_NUMBER: builtins.int
    uses_integer_subject_id_gallery: builtins.bool
    """DEPRECATED: FOR LEGACY SYSTEMS ONLY indicates that the gallery ID returned is of integer form"""
    @property
    def match_matrix(self) -> briar.briar_grpc.briar_pb2.BriarMatrix:
        """Required: A match matrix instead of a Matchlist"""

    @property
    def matrix_probe_detections(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, briar.briar_grpc.briar_pb2.Detection]:
        """	repeated string matrix_probe_entry_types = 10;
        	repeated string matrix_gallery_entry_types = 11;
        Optional: A list of detections that correspond to all entries in the probe database
        """

    @property
    def matrix_gallery_detections(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, briar.briar_grpc.briar_pb2.Detection]:
        """Optional: A list of detections that correspond to all entries in the gallery database"""

    @property
    def matrix_probe_tracklets(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, briar.briar_grpc.briar_pb2.Tracklet]:
        """Optional: A list of tracklets that correspond to all entries in the probe database"""

    @property
    def matrix_gallery_tracklets(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, briar.briar_grpc.briar_pb2.Tracklet]:
        """Optional: A list of tracklets that correspond to all entries in the gallery database"""

    @property
    def matrix_probe_attributes(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, briar.briar_grpc.briar_pb2.MediaMetadata]:
        """Optional: extra probe attributes"""

    @property
    def matrix_gallery_attributes(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, briar.briar_grpc.briar_pb2.MediaMetadata]:
        """Optional: extra gallery attributes"""

    @property
    def errors(self) -> briar.briar_grpc.briar_error_pb2.BriarErrors: ...
    @property
    def progress(self) -> briar.briar_grpc.briar_pb2.BriarProgress:
        """OPTIONAL: provides progress updates for progress bar display. See example code for details"""

    def __init__(
        self,
        *,
        match_matrix: briar.briar_grpc.briar_pb2.BriarMatrix | None = ...,
        matrix_probe_detections: collections.abc.Mapping[builtins.str, briar.briar_grpc.briar_pb2.Detection] | None = ...,
        matrix_gallery_detections: collections.abc.Mapping[builtins.str, briar.briar_grpc.briar_pb2.Detection] | None = ...,
        matrix_probe_tracklets: collections.abc.Mapping[builtins.str, briar.briar_grpc.briar_pb2.Tracklet] | None = ...,
        matrix_gallery_tracklets: collections.abc.Mapping[builtins.str, briar.briar_grpc.briar_pb2.Tracklet] | None = ...,
        matrix_probe_attributes: collections.abc.Mapping[builtins.str, briar.briar_grpc.briar_pb2.MediaMetadata] | None = ...,
        matrix_gallery_attributes: collections.abc.Mapping[builtins.str, briar.briar_grpc.briar_pb2.MediaMetadata] | None = ...,
        uses_integer_subject_id_gallery: builtins.bool = ...,
        errors: briar.briar_grpc.briar_error_pb2.BriarErrors | None = ...,
        progress: briar.briar_grpc.briar_pb2.BriarProgress | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["errors", b"errors", "match_matrix", b"match_matrix", "progress", b"progress"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["errors", b"errors", "match_matrix", b"match_matrix", "matrix_gallery_attributes", b"matrix_gallery_attributes", "matrix_gallery_detections", b"matrix_gallery_detections", "matrix_gallery_tracklets", b"matrix_gallery_tracklets", "matrix_probe_attributes", b"matrix_probe_attributes", "matrix_probe_detections", b"matrix_probe_detections", "matrix_probe_tracklets", b"matrix_probe_tracklets", "progress", b"progress", "uses_integer_subject_id_gallery", b"uses_integer_subject_id_gallery"]) -> None: ...

global___VerifyDatabaseReply = VerifyDatabaseReply

@typing.final
class DatabaseHasEntryRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATABASE_FIELD_NUMBER: builtins.int
    ENTRY_ID_FIELD_NUMBER: builtins.int
    entry_id: builtins.str
    @property
    def database(self) -> briar.briar_grpc.briar_pb2.BriarDatabase: ...
    def __init__(
        self,
        *,
        database: briar.briar_grpc.briar_pb2.BriarDatabase | None = ...,
        entry_id: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["database", b"database"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["database", b"database", "entry_id", b"entry_id"]) -> None: ...

global___DatabaseHasEntryRequest = DatabaseHasEntryRequest

@typing.final
class DatabaseMoveEntryRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FROM_DATABASE_FIELD_NUMBER: builtins.int
    TO_DATABASE_FIELD_NUMBER: builtins.int
    ENTRY_ID_FIELD_NUMBER: builtins.int
    SHOULD_COPY_FIELD_NUMBER: builtins.int
    entry_id: builtins.str
    should_copy: builtins.bool
    @property
    def from_database(self) -> briar.briar_grpc.briar_pb2.BriarDatabase: ...
    @property
    def to_database(self) -> briar.briar_grpc.briar_pb2.BriarDatabase: ...
    def __init__(
        self,
        *,
        from_database: briar.briar_grpc.briar_pb2.BriarDatabase | None = ...,
        to_database: briar.briar_grpc.briar_pb2.BriarDatabase | None = ...,
        entry_id: builtins.str = ...,
        should_copy: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["from_database", b"from_database", "to_database", b"to_database"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["entry_id", b"entry_id", "from_database", b"from_database", "should_copy", b"should_copy", "to_database", b"to_database"]) -> None: ...

global___DatabaseMoveEntryRequest = DatabaseMoveEntryRequest

@typing.final
class DatabaseHasEntryReply(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    EXISTS_FIELD_NUMBER: builtins.int
    IS_COMPLETE_FIELD_NUMBER: builtins.int
    PROGRESS_FIELD_NUMBER: builtins.int
    exists: builtins.bool
    is_complete: builtins.bool
    @property
    def progress(self) -> briar.briar_grpc.briar_pb2.BriarProgress: ...
    def __init__(
        self,
        *,
        exists: builtins.bool = ...,
        is_complete: builtins.bool = ...,
        progress: briar.briar_grpc.briar_pb2.BriarProgress | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["progress", b"progress"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["exists", b"exists", "is_complete", b"is_complete", "progress", b"progress"]) -> None: ...

global___DatabaseHasEntryReply = DatabaseHasEntryReply

@typing.final
class DatabaseMoveEntryReply(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SUCCESS_FIELD_NUMBER: builtins.int
    PROGRESS_FIELD_NUMBER: builtins.int
    success: builtins.bool
    @property
    def progress(self) -> briar.briar_grpc.briar_pb2.BriarProgress: ...
    def __init__(
        self,
        *,
        success: builtins.bool = ...,
        progress: briar.briar_grpc.briar_pb2.BriarProgress | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["progress", b"progress"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["progress", b"progress", "success", b"success"]) -> None: ...

global___DatabaseMoveEntryReply = DatabaseMoveEntryReply

@typing.final
class ClusterRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATABASE_FIELD_NUMBER: builtins.int
    DURATIONS_FIELD_NUMBER: builtins.int
    @property
    def database(self) -> briar.briar_grpc.briar_pb2.BriarDatabase:
        """UNIMPLEMENTED: Run clustering on a database of templates to group templates by person"""

    @property
    def durations(self) -> briar.briar_grpc.briar_pb2.BriarDurations:
        """UNIMPLEMENTED: Log the time needed to complete the request on the server"""

    def __init__(
        self,
        *,
        database: briar.briar_grpc.briar_pb2.BriarDatabase | None = ...,
        durations: briar.briar_grpc.briar_pb2.BriarDurations | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["database", b"database", "durations", b"durations"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["database", b"database", "durations", b"durations"]) -> None: ...

global___ClusterRequest = ClusterRequest

@typing.final
class ClusterReply(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CLUSTER_IDS_FIELD_NUMBER: builtins.int
    CLUSTER_CONFIDENCES_FIELD_NUMBER: builtins.int
    DURATIONS_FIELD_NUMBER: builtins.int
    ERRORS_FIELD_NUMBER: builtins.int
    PROGRESS_FIELD_NUMBER: builtins.int
    @property
    def cluster_ids(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[briar.briar_grpc.briar_pb2.ClusterIds]:
        """UNIMPLEMENTED:List of clustered ids"""

    @property
    def cluster_confidences(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[briar.briar_grpc.briar_pb2.ClusterConfidence]:
        """UNIMPLEMENTED: List of the cluster confidences"""

    @property
    def durations(self) -> briar.briar_grpc.briar_pb2.BriarDurations:
        """UNIMPLEMENTED: Log the time needed to complete the request on the server"""

    @property
    def errors(self) -> briar.briar_grpc.briar_error_pb2.BriarErrors:
        """UNIMPLEMENTED: Indicate any errors or warnings."""

    @property
    def progress(self) -> briar.briar_grpc.briar_pb2.BriarProgress:
        """UNIMPLEMENTED:: provides progress updates for progress bar display. See example code for details"""

    def __init__(
        self,
        *,
        cluster_ids: collections.abc.Iterable[briar.briar_grpc.briar_pb2.ClusterIds] | None = ...,
        cluster_confidences: collections.abc.Iterable[briar.briar_grpc.briar_pb2.ClusterConfidence] | None = ...,
        durations: briar.briar_grpc.briar_pb2.BriarDurations | None = ...,
        errors: briar.briar_grpc.briar_error_pb2.BriarErrors | None = ...,
        progress: briar.briar_grpc.briar_pb2.BriarProgress | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["durations", b"durations", "errors", b"errors", "progress", b"progress"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["cluster_confidences", b"cluster_confidences", "cluster_ids", b"cluster_ids", "durations", b"durations", "errors", b"errors", "progress", b"progress"]) -> None: ...

global___ClusterReply = ClusterReply

@typing.final
class EnhanceRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MEDIA_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    OPTIONS_FIELD_NUMBER: builtins.int
    FRAME_ID_FIELD_NUMBER: builtins.int
    DURATIONS_FIELD_NUMBER: builtins.int
    ENHANCE_OPTIONS_FIELD_NUMBER: builtins.int
    frame_id: builtins.int
    """The id of the media frame associated with the detections."""
    @property
    def media(self) -> briar.briar_grpc.briar_pb2.BriarMedia:
        """ The image or video to enhance."""

    @property
    def metadata(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[briar.briar_grpc.briar_pb2.Attribute]:
        """Metadata on the video to select enhancement parameters."""

    @property
    def options(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[briar.briar_grpc.briar_pb2.Attribute]:
        """Algorithm specific options."""

    @property
    def durations(self) -> briar.briar_grpc.briar_pb2.BriarDurations:
        """Log the time needed to complete the request on the server"""

    @property
    def enhance_options(self) -> briar.briar_grpc.briar_pb2.EnhanceOptions:
        """enhance options provided by the API"""

    def __init__(
        self,
        *,
        media: briar.briar_grpc.briar_pb2.BriarMedia | None = ...,
        metadata: collections.abc.Iterable[briar.briar_grpc.briar_pb2.Attribute] | None = ...,
        options: collections.abc.Iterable[briar.briar_grpc.briar_pb2.Attribute] | None = ...,
        frame_id: builtins.int = ...,
        durations: briar.briar_grpc.briar_pb2.BriarDurations | None = ...,
        enhance_options: briar.briar_grpc.briar_pb2.EnhanceOptions | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["durations", b"durations", "enhance_options", b"enhance_options", "media", b"media"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["durations", b"durations", "enhance_options", b"enhance_options", "frame_id", b"frame_id", "media", b"media", "metadata", b"metadata", "options", b"options"]) -> None: ...

global___EnhanceRequest = EnhanceRequest

@typing.final
class EnhanceReply(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MEDIA_FIELD_NUMBER: builtins.int
    DURATIONS_FIELD_NUMBER: builtins.int
    PROGRESS_FIELD_NUMBER: builtins.int
    ERRORS_FIELD_NUMBER: builtins.int
    PROGRESS_ONLY_REPLY_FIELD_NUMBER: builtins.int
    progress_only_reply: builtins.bool
    """REQUIRED: set to true if this is a reply only providing a progress update to the API. If progress_only_reply is set to True, nothing else in the reply needs to be populated"""
    @property
    def media(self) -> briar.briar_grpc.briar_pb2.BriarMedia:
        """REQUIRED: The enhanced result."""

    @property
    def durations(self) -> briar.briar_grpc.briar_pb2.BriarDurations:
        """Log the time needed to complete the request on the server"""

    @property
    def progress(self) -> briar.briar_grpc.briar_pb2.BriarProgress:
        """OPTIONAL: provides progress updates for progress bar display. See example code for details"""

    @property
    def errors(self) -> briar.briar_grpc.briar_error_pb2.BriarErrors:
        """Indicate any errors or warnings."""

    def __init__(
        self,
        *,
        media: briar.briar_grpc.briar_pb2.BriarMedia | None = ...,
        durations: briar.briar_grpc.briar_pb2.BriarDurations | None = ...,
        progress: briar.briar_grpc.briar_pb2.BriarProgress | None = ...,
        errors: briar.briar_grpc.briar_error_pb2.BriarErrors | None = ...,
        progress_only_reply: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["durations", b"durations", "errors", b"errors", "media", b"media", "progress", b"progress"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["durations", b"durations", "errors", b"errors", "media", b"media", "progress", b"progress", "progress_only_reply", b"progress_only_reply"]) -> None: ...

global___EnhanceReply = EnhanceReply

@typing.final
class DatabaseFinalizeRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATABASE_FIELD_NUMBER: builtins.int
    @property
    def database(self) -> briar.briar_grpc.briar_pb2.BriarDatabase:
        """The database to optimize"""

    def __init__(
        self,
        *,
        database: briar.briar_grpc.briar_pb2.BriarDatabase | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["database", b"database"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["database", b"database"]) -> None: ...

global___DatabaseFinalizeRequest = DatabaseFinalizeRequest

@typing.final
class DatabaseFinalizeReply(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DURATIONS_FIELD_NUMBER: builtins.int
    ERRORS_FIELD_NUMBER: builtins.int
    EXISTS_FIELD_NUMBER: builtins.int
    exists: builtins.bool
    """REQUIRED: set to true if the requested database exists and the reply is populated correctly"""
    @property
    def durations(self) -> briar.briar_grpc.briar_pb2.BriarDurations:
        """Log the time needed to complete the request on the server"""

    @property
    def errors(self) -> briar.briar_grpc.briar_error_pb2.BriarErrors:
        """Indicate any errors or warnings."""

    def __init__(
        self,
        *,
        durations: briar.briar_grpc.briar_pb2.BriarDurations | None = ...,
        errors: briar.briar_grpc.briar_error_pb2.BriarErrors | None = ...,
        exists: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["durations", b"durations", "errors", b"errors"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["durations", b"durations", "errors", b"errors", "exists", b"exists"]) -> None: ...

global___DatabaseFinalizeReply = DatabaseFinalizeReply

@typing.final
class BriarServiceConfigurationRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___BriarServiceConfigurationRequest = BriarServiceConfigurationRequest

@typing.final
class BriarServiceConfigurationReply(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NUMBER_OF_SERVICE_PORTS_FIELD_NUMBER: builtins.int
    NUMBER_OF_PROCESSES_PER_PORT_FIELD_NUMBER: builtins.int
    NUMBER_OF_THREADS_PER_PROCESS_FIELD_NUMBER: builtins.int
    REPORTING_PROCESS_NUMBER_FIELD_NUMBER: builtins.int
    BASE_PORT_FIELD_NUMBER: builtins.int
    PORT_LIST_FIELD_NUMBER: builtins.int
    number_of_service_ports: builtins.int
    """REQUIRED: the amount of different addresses your system will be using (e.g. 2 if using localhost:50051 and 50052)"""
    number_of_processes_per_port: builtins.int
    """REQUIRED: the amount of simultaneous processes that are running on each port (python processes dont share resources, they fork them)"""
    number_of_threads_per_process: builtins.int
    """REQUIRED: the amount of simultaneous threads running within each process (python threads do usually share reesources, but are constrained by the GIL)"""
    reporting_process_number: builtins.int
    """REQUIRED: the process PID that is reporting this request"""
    base_port: builtins.str
    """REQUIRED: the base port we should use as point-of-contact for main API calls. If you have a single service, this is your services port"""
    @property
    def port_list(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Required: the list of ports that are running your services. If you have a single service, this will contain just the base port."""

    def __init__(
        self,
        *,
        number_of_service_ports: builtins.int = ...,
        number_of_processes_per_port: builtins.int = ...,
        number_of_threads_per_process: builtins.int = ...,
        reporting_process_number: builtins.int = ...,
        base_port: builtins.str = ...,
        port_list: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["base_port", b"base_port", "number_of_processes_per_port", b"number_of_processes_per_port", "number_of_service_ports", b"number_of_service_ports", "number_of_threads_per_process", b"number_of_threads_per_process", "port_list", b"port_list", "reporting_process_number", b"reporting_process_number"]) -> None: ...

global___BriarServiceConfigurationReply = BriarServiceConfigurationReply
